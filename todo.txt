Ideas for articles:

- [ ] HTTP server using arenas
- [ ] Migration from mbedtls to aws-lc
- [ ] ~~ASM crypto~~
- [ ] How this blog is made. Line numbers in code snippets.
- [ ] Banjo chords
- [ ] Dtrace VM
- [ ] From BIOS to bootloader to kernel to userspace
- [ ] A faster HTTP parser than NodeJS's one
- [ ] SHA1 multi-block hash
- [ ] How CGO calls are implemented in assembly
- [ ] How I develop Windows applications from the comfort of Linux

Blog implementation:

- [ ] Consider post-processing HTML instead of markdown to simplify e.g. to add title ids
- [ ] Use libcmark to simplify parsing
- [ ] Link to related articles at the end (requires post-processing after all articles have been generated)
- [ ] Search
  + May require proper markdown parsing (e.g. with libcmark) to avoid having html/markdown elements in search results, to get the (approximate) location of each results (e.g. parent title), and show a rendered excerpt in search results. Perhaps simply post-process html?
  + Results are shown inline
  + Results show (some) surrounding text
  + Results have a link to the page and surrounding html section
  + Implementation: trigrams in js/wasm? Fuzzy search? See https://pkg.odin-lang.org/search.js
  + Search code/data are only fetched lazily
  + Cache invalidation of the search blob e.g. when an article is created/modified? => split search code (rarely changes) and data (changes a lot)
  + Code snippets included in search results?
- [ ] Articles excerpt on the home page?
- [ ] Dark mode
- [ ] Browser live reload
  + Send the F5 key to the browser window (does not work in Wayland)
  + Somehow send an IPC message to the right browser process to reload the page?
  + HTTP server & HTML page communicate via websocket to reload content (complex)
  + HTTP2 force push to force the browser to get the new page version?
  + Server sent event to reload the page
- [ ] Built-in http server
