<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="178"><g><title>runtime.duffcopy+464 (1 samples, 0.56%)</title><rect x="0.0000%" y="277" width="0.5618%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>github.com/ory/x/popx.(*MigrationBox).check (2 samples, 1.12%)</title><rect x="0.0000%" y="293" width="1.1236%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>runtime.duffcopy+504 (1 samples, 0.56%)</title><rect x="0.5618%" y="277" width="0.5618%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.8118%" y="287.50"></text></g><g><title>github.com/ory/x/popx.(*MigrationBox).check (4 samples, 2.25%)</title><rect x="0.0000%" y="309" width="2.2472%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="319.50">g..</text></g><g><title>runtime.memequal (2 samples, 1.12%)</title><rect x="1.1236%" y="293" width="1.1236%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="1.3736%" y="303.50"></text></g><g><title>embed.(*file).Name (1 samples, 0.56%)</title><rect x="2.2472%" y="245" width="0.5618%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="2.4972%" y="255.50"></text></g><g><title>embed.split (1 samples, 0.56%)</title><rect x="2.2472%" y="229" width="0.5618%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="2.4972%" y="239.50"></text></g><g><title>sort.partialInsertionSort (1 samples, 0.56%)</title><rect x="2.8090%" y="149" width="0.5618%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="3.0590%" y="159.50"></text></g><g><title>github.com/ory/x/fsx.(*dirEntries).Less (1 samples, 0.56%)</title><rect x="2.8090%" y="133" width="0.5618%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="3.0590%" y="143.50"></text></g><g><title>github.com/ory/x/fsx.dirEntries.Less (1 samples, 0.56%)</title><rect x="2.8090%" y="117" width="0.5618%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="1"/><text x="3.0590%" y="127.50"></text></g><g><title>embed.(*file).Name (1 samples, 0.56%)</title><rect x="2.8090%" y="101" width="0.5618%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="3.0590%" y="111.50"></text></g><g><title>embed.split (1 samples, 0.56%)</title><rect x="2.8090%" y="85" width="0.5618%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="3.0590%" y="95.50"></text></g><g><title>github.com/ory/x/fsx.(*dirEntries).clean (2 samples, 1.12%)</title><rect x="2.8090%" y="197" width="1.1236%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="2"/><text x="3.0590%" y="207.50"></text></g><g><title>sort.Sort (2 samples, 1.12%)</title><rect x="2.8090%" y="181" width="1.1236%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="3.0590%" y="191.50"></text></g><g><title>sort.pdqsort (2 samples, 1.12%)</title><rect x="2.8090%" y="165" width="1.1236%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="3.0590%" y="175.50"></text></g><g><title>sort.pdqsort (1 samples, 0.56%)</title><rect x="3.3708%" y="149" width="0.5618%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="3.6208%" y="159.50"></text></g><g><title>sort.partialInsertionSort (1 samples, 0.56%)</title><rect x="3.3708%" y="133" width="0.5618%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="3.6208%" y="143.50"></text></g><g><title>github.com/ory/x/fsx.(*dirEntries).Less (1 samples, 0.56%)</title><rect x="3.3708%" y="117" width="0.5618%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="3.6208%" y="127.50"></text></g><g><title>github.com/ory/x/fsx.dirEntries.Less (1 samples, 0.56%)</title><rect x="3.3708%" y="101" width="0.5618%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="3.6208%" y="111.50"></text></g><g><title>embed.(*file).Name (1 samples, 0.56%)</title><rect x="3.3708%" y="85" width="0.5618%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="3.6208%" y="95.50"></text></g><g><title>embed.split (1 samples, 0.56%)</title><rect x="3.3708%" y="69" width="0.5618%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="3.6208%" y="79.50"></text></g><g><title>io/fs.ReadDir (3 samples, 1.69%)</title><rect x="2.8090%" y="245" width="1.6854%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="3"/><text x="3.0590%" y="255.50"></text></g><g><title>github.com/ory/x/fsx.(*mergedFS).ReadDir (3 samples, 1.69%)</title><rect x="2.8090%" y="229" width="1.6854%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="3"/><text x="3.0590%" y="239.50"></text></g><g><title>github.com/ory/x/fsx.mergedFS.ReadDir (3 samples, 1.69%)</title><rect x="2.8090%" y="213" width="1.6854%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="3"/><text x="3.0590%" y="223.50"></text></g><g><title>io/fs.ReadDir (1 samples, 0.56%)</title><rect x="3.9326%" y="197" width="0.5618%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="4.1826%" y="207.50"></text></g><g><title>embed.FS.ReadDir (1 samples, 0.56%)</title><rect x="3.9326%" y="181" width="0.5618%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="4.1826%" y="191.50"></text></g><g><title>embed.FS.Open (1 samples, 0.56%)</title><rect x="3.9326%" y="165" width="0.5618%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="4.1826%" y="175.50"></text></g><g><title>embed.FS.readDir (1 samples, 0.56%)</title><rect x="3.9326%" y="149" width="0.5618%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="4.1826%" y="159.50"></text></g><g><title>embed.split (1 samples, 0.56%)</title><rect x="3.9326%" y="133" width="0.5618%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="4.1826%" y="143.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="3.9326%" y="117" width="0.5618%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="4.1826%" y="127.50"></text></g><g><title>github.com/ory/x/fsx.(*mergedFS).Open (2 samples, 1.12%)</title><rect x="4.4944%" y="213" width="1.1236%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="2"/><text x="4.7444%" y="223.50"></text></g><g><title>github.com/ory/x/fsx.mergedFS.Open (2 samples, 1.12%)</title><rect x="4.4944%" y="197" width="1.1236%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="2"/><text x="4.7444%" y="207.50"></text></g><g><title>embed.FS.Open (2 samples, 1.12%)</title><rect x="4.4944%" y="181" width="1.1236%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="2"/><text x="4.7444%" y="191.50"></text></g><g><title>embed.FS.lookup (2 samples, 1.12%)</title><rect x="4.4944%" y="165" width="1.1236%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="2"/><text x="4.7444%" y="175.50"></text></g><g><title>embed.split (2 samples, 1.12%)</title><rect x="4.4944%" y="149" width="1.1236%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="2"/><text x="4.7444%" y="159.50"></text></g><g><title>regexp.(*Regexp).FindAllStringSubmatch (1 samples, 0.56%)</title><rect x="5.6180%" y="197" width="0.5618%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="5.8680%" y="207.50"></text></g><g><title>regexp.(*Regexp).allMatches (1 samples, 0.56%)</title><rect x="5.6180%" y="181" width="0.5618%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="5.8680%" y="191.50"></text></g><g><title>regexp.(*Regexp).doExecute (1 samples, 0.56%)</title><rect x="5.6180%" y="165" width="0.5618%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="5.8680%" y="175.50"></text></g><g><title>regexp.(*Regexp).backtrack (1 samples, 0.56%)</title><rect x="5.6180%" y="149" width="0.5618%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="5.8680%" y="159.50"></text></g><g><title>regexp.(*inputString).step (1 samples, 0.56%)</title><rect x="5.6180%" y="133" width="0.5618%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="5.8680%" y="143.50"></text></g><g><title>github.com/ory/x/popx.ParseMigrationFilename (2 samples, 1.12%)</title><rect x="5.6180%" y="213" width="1.1236%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="2"/><text x="5.8680%" y="223.50"></text></g><g><title>runtime.newobject (1 samples, 0.56%)</title><rect x="6.1798%" y="197" width="0.5618%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="1"/><text x="6.4298%" y="207.50"></text></g><g><title>runtime.mallocgc (1 samples, 0.56%)</title><rect x="6.1798%" y="181" width="0.5618%" height="15" fill="rgb(235,93,37)" fg:x="11" fg:w="1"/><text x="6.4298%" y="191.50"></text></g><g><title>runtime.mallocgcSmallScanNoHeader (1 samples, 0.56%)</title><rect x="6.1798%" y="165" width="0.5618%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="1"/><text x="6.4298%" y="175.50"></text></g><g><title>runtime.(*mspan).writeHeapBitsSmall (1 samples, 0.56%)</title><rect x="6.1798%" y="149" width="0.5618%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="1"/><text x="6.4298%" y="159.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="7.3034%" y="181" width="0.5618%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="1"/><text x="7.5534%" y="191.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="7.8652%" y="149" width="0.5618%" height="15" fill="rgb(218,138,4)" fg:x="14" fg:w="1"/><text x="8.1152%" y="159.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="7.8652%" y="133" width="0.5618%" height="15" fill="rgb(250,191,14)" fg:x="14" fg:w="1"/><text x="8.1152%" y="143.50"></text></g><g><title>sort.choosePivot (2 samples, 1.12%)</title><rect x="7.8652%" y="181" width="1.1236%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="2"/><text x="8.1152%" y="191.50"></text></g><g><title>sort.median (2 samples, 1.12%)</title><rect x="7.8652%" y="165" width="1.1236%" height="15" fill="rgb(206,27,48)" fg:x="14" fg:w="2"/><text x="8.1152%" y="175.50"></text></g><g><title>sort.(*reverse).Less (1 samples, 0.56%)</title><rect x="8.4270%" y="149" width="0.5618%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="1"/><text x="8.6770%" y="159.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (7 samples, 3.93%)</title><rect x="11.7978%" y="165" width="3.9326%" height="15" fill="rgb(250,213,24)" fg:x="21" fg:w="7"/><text x="12.0478%" y="175.50">gith..</text></g><g><title>runtime.memequal (4 samples, 2.25%)</title><rect x="13.4831%" y="149" width="2.2472%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="4"/><text x="13.7331%" y="159.50">r..</text></g><g><title>sort.partition (18 samples, 10.11%)</title><rect x="8.9888%" y="181" width="10.1124%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="18"/><text x="9.2388%" y="191.50">sort.partition</text></g><g><title>sort.(*reverse).Less (6 samples, 3.37%)</title><rect x="15.7303%" y="165" width="3.3708%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="6"/><text x="15.9803%" y="175.50">sor..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (5 samples, 2.81%)</title><rect x="16.2921%" y="149" width="2.8090%" height="15" fill="rgb(251,118,11)" fg:x="29" fg:w="5"/><text x="16.5421%" y="159.50">gi..</text></g><g><title>runtime.memequal (3 samples, 1.69%)</title><rect x="17.4157%" y="133" width="1.6854%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="3"/><text x="17.6657%" y="143.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="19.1011%" y="165" width="0.5618%" height="15" fill="rgb(247,81,37)" fg:x="34" fg:w="1"/><text x="19.3511%" y="175.50"></text></g><g><title>sort.(*reverse).Less (2 samples, 1.12%)</title><rect x="19.6629%" y="165" width="1.1236%" height="15" fill="rgb(209,12,38)" fg:x="35" fg:w="2"/><text x="19.9129%" y="175.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="20.2247%" y="149" width="0.5618%" height="15" fill="rgb(227,1,9)" fg:x="36" fg:w="1"/><text x="20.4747%" y="159.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="21.3483%" y="117" width="0.5618%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="1"/><text x="21.5983%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (2 samples, 1.12%)</title><rect x="21.3483%" y="133" width="1.1236%" height="15" fill="rgb(221,10,30)" fg:x="38" fg:w="2"/><text x="21.5983%" y="143.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="21.9101%" y="117" width="0.5618%" height="15" fill="rgb(210,229,1)" fg:x="39" fg:w="1"/><text x="22.1601%" y="127.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="22.4719%" y="101" width="0.5618%" height="15" fill="rgb(222,148,37)" fg:x="40" fg:w="1"/><text x="22.7219%" y="111.50"></text></g><g><title>sort.choosePivot (6 samples, 3.37%)</title><rect x="20.7865%" y="165" width="3.3708%" height="15" fill="rgb(234,67,33)" fg:x="37" fg:w="6"/><text x="21.0365%" y="175.50">sor..</text></g><g><title>sort.median (6 samples, 3.37%)</title><rect x="20.7865%" y="149" width="3.3708%" height="15" fill="rgb(247,98,35)" fg:x="37" fg:w="6"/><text x="21.0365%" y="159.50">sor..</text></g><g><title>sort.(*reverse).Less (3 samples, 1.69%)</title><rect x="22.4719%" y="133" width="1.6854%" height="15" fill="rgb(247,138,52)" fg:x="40" fg:w="3"/><text x="22.7219%" y="143.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (3 samples, 1.69%)</title><rect x="22.4719%" y="117" width="1.6854%" height="15" fill="rgb(213,79,30)" fg:x="40" fg:w="3"/><text x="22.7219%" y="127.50"></text></g><g><title>runtime.memequal (2 samples, 1.12%)</title><rect x="23.0337%" y="101" width="1.1236%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="2"/><text x="23.2837%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="24.1573%" y="149" width="0.5618%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="1"/><text x="24.4073%" y="159.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="24.1573%" y="133" width="0.5618%" height="15" fill="rgb(216,154,8)" fg:x="43" fg:w="1"/><text x="24.4073%" y="143.50"></text></g><g><title>sort.insertionSort (2 samples, 1.12%)</title><rect x="24.1573%" y="165" width="1.1236%" height="15" fill="rgb(244,35,45)" fg:x="43" fg:w="2"/><text x="24.4073%" y="175.50"></text></g><g><title>sort.(*reverse).Swap (1 samples, 0.56%)</title><rect x="24.7191%" y="149" width="0.5618%" height="15" fill="rgb(251,115,12)" fg:x="44" fg:w="1"/><text x="24.9691%" y="159.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="24.7191%" y="133" width="0.5618%" height="15" fill="rgb(240,54,50)" fg:x="44" fg:w="1"/><text x="24.9691%" y="143.50"></text></g><g><title>cmpbody (4 samples, 2.25%)</title><rect x="28.0899%" y="133" width="2.2472%" height="15" fill="rgb(233,84,52)" fg:x="50" fg:w="4"/><text x="28.3399%" y="143.50">c..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (14 samples, 7.87%)</title><rect x="27.5281%" y="149" width="7.8652%" height="15" fill="rgb(207,117,47)" fg:x="49" fg:w="14"/><text x="27.7781%" y="159.50">github.com/..</text></g><g><title>runtime.memequal (9 samples, 5.06%)</title><rect x="30.3371%" y="133" width="5.0562%" height="15" fill="rgb(249,43,39)" fg:x="54" fg:w="9"/><text x="30.5871%" y="143.50">runtim..</text></g><g><title>cmpbody (2 samples, 1.12%)</title><rect x="37.6404%" y="117" width="1.1236%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="2"/><text x="37.8904%" y="127.50"></text></g><g><title>sort.partition (28 samples, 15.73%)</title><rect x="25.2809%" y="165" width="15.7303%" height="15" fill="rgb(236,212,23)" fg:x="45" fg:w="28"/><text x="25.5309%" y="175.50">sort.partition</text></g><g><title>sort.(*reverse).Less (10 samples, 5.62%)</title><rect x="35.3933%" y="149" width="5.6180%" height="15" fill="rgb(242,79,21)" fg:x="63" fg:w="10"/><text x="35.6433%" y="159.50">sort.(*..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (9 samples, 5.06%)</title><rect x="35.9551%" y="133" width="5.0562%" height="15" fill="rgb(211,96,35)" fg:x="64" fg:w="9"/><text x="36.2051%" y="143.50">github..</text></g><g><title>runtime.memequal (4 samples, 2.25%)</title><rect x="38.7640%" y="117" width="2.2472%" height="15" fill="rgb(253,215,40)" fg:x="69" fg:w="4"/><text x="39.0140%" y="127.50">r..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (2 samples, 1.12%)</title><rect x="41.0112%" y="149" width="1.1236%" height="15" fill="rgb(211,81,21)" fg:x="73" fg:w="2"/><text x="41.2612%" y="159.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="42.1348%" y="133" width="0.5618%" height="15" fill="rgb(208,190,38)" fg:x="75" fg:w="1"/><text x="42.3848%" y="143.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="43.8202%" y="117" width="0.5618%" height="15" fill="rgb(235,213,38)" fg:x="78" fg:w="1"/><text x="44.0702%" y="127.50"></text></g><g><title>sort.choosePivot (7 samples, 3.93%)</title><rect x="42.1348%" y="149" width="3.9326%" height="15" fill="rgb(237,122,38)" fg:x="75" fg:w="7"/><text x="42.3848%" y="159.50">sort..</text></g><g><title>sort.median (6 samples, 3.37%)</title><rect x="42.6966%" y="133" width="3.3708%" height="15" fill="rgb(244,218,35)" fg:x="76" fg:w="6"/><text x="42.9466%" y="143.50">sor..</text></g><g><title>sort.(*reverse).Less (3 samples, 1.69%)</title><rect x="44.3820%" y="117" width="1.6854%" height="15" fill="rgb(240,68,47)" fg:x="79" fg:w="3"/><text x="44.6320%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (2 samples, 1.12%)</title><rect x="44.9438%" y="101" width="1.1236%" height="15" fill="rgb(210,16,53)" fg:x="80" fg:w="2"/><text x="45.1938%" y="111.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="45.5056%" y="85" width="0.5618%" height="15" fill="rgb(235,124,12)" fg:x="81" fg:w="1"/><text x="45.7556%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (3 samples, 1.69%)</title><rect x="47.1910%" y="133" width="1.6854%" height="15" fill="rgb(224,169,11)" fg:x="84" fg:w="3"/><text x="47.4410%" y="143.50"></text></g><g><title>runtime.memequal (2 samples, 1.12%)</title><rect x="47.7528%" y="117" width="1.1236%" height="15" fill="rgb(250,166,2)" fg:x="85" fg:w="2"/><text x="48.0028%" y="127.50"></text></g><g><title>runtime.duffcopy+456 (1 samples, 0.56%)</title><rect x="48.8764%" y="101" width="0.5618%" height="15" fill="rgb(242,216,29)" fg:x="87" fg:w="1"/><text x="49.1264%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (2 samples, 1.12%)</title><rect x="48.8764%" y="133" width="1.1236%" height="15" fill="rgb(230,116,27)" fg:x="87" fg:w="2"/><text x="49.1264%" y="143.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (2 samples, 1.12%)</title><rect x="48.8764%" y="117" width="1.1236%" height="15" fill="rgb(228,99,48)" fg:x="87" fg:w="2"/><text x="49.1264%" y="127.50"></text></g><g><title>runtime.duffcopy+504 (1 samples, 0.56%)</title><rect x="49.4382%" y="101" width="0.5618%" height="15" fill="rgb(253,11,6)" fg:x="88" fg:w="1"/><text x="49.6882%" y="111.50"></text></g><g><title>sort.insertionSort (9 samples, 5.06%)</title><rect x="46.0674%" y="149" width="5.0562%" height="15" fill="rgb(247,143,39)" fg:x="82" fg:w="9"/><text x="46.3174%" y="159.50">sort.i..</text></g><g><title>sort.(*reverse).Less (2 samples, 1.12%)</title><rect x="50.0000%" y="133" width="1.1236%" height="15" fill="rgb(236,97,10)" fg:x="89" fg:w="2"/><text x="50.2500%" y="143.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="50.5618%" y="117" width="0.5618%" height="15" fill="rgb(233,208,19)" fg:x="90" fg:w="1"/><text x="50.8118%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (5 samples, 2.81%)</title><rect x="52.8090%" y="133" width="2.8090%" height="15" fill="rgb(216,164,2)" fg:x="94" fg:w="5"/><text x="53.0590%" y="143.50">gi..</text></g><g><title>runtime.memequal (5 samples, 2.81%)</title><rect x="52.8090%" y="117" width="2.8090%" height="15" fill="rgb(220,129,5)" fg:x="94" fg:w="5"/><text x="53.0590%" y="127.50">ru..</text></g><g><title>cmpbody (2 samples, 1.12%)</title><rect x="58.9888%" y="101" width="1.1236%" height="15" fill="rgb(242,17,10)" fg:x="105" fg:w="2"/><text x="59.2388%" y="111.50"></text></g><g><title>sort.(*reverse).Less (15 samples, 8.43%)</title><rect x="55.6180%" y="133" width="8.4270%" height="15" fill="rgb(242,107,0)" fg:x="99" fg:w="15"/><text x="55.8680%" y="143.50">sort.(*rever..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (13 samples, 7.30%)</title><rect x="56.7416%" y="117" width="7.3034%" height="15" fill="rgb(251,28,31)" fg:x="101" fg:w="13"/><text x="56.9916%" y="127.50">github.com..</text></g><g><title>runtime.memequal (7 samples, 3.93%)</title><rect x="60.1124%" y="101" width="3.9326%" height="15" fill="rgb(233,223,10)" fg:x="107" fg:w="7"/><text x="60.3624%" y="111.50">runt..</text></g><g><title>sort.partition (24 samples, 13.48%)</title><rect x="51.1236%" y="149" width="13.4831%" height="15" fill="rgb(215,21,27)" fg:x="91" fg:w="24"/><text x="51.3736%" y="159.50">sort.partition</text></g><g><title>sort.(*reverse).Swap (1 samples, 0.56%)</title><rect x="64.0449%" y="133" width="0.5618%" height="15" fill="rgb(232,23,21)" fg:x="114" fg:w="1"/><text x="64.2949%" y="143.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="64.0449%" y="117" width="0.5618%" height="15" fill="rgb(244,5,23)" fg:x="114" fg:w="1"/><text x="64.2949%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="64.0449%" y="101" width="0.5618%" height="15" fill="rgb(226,81,46)" fg:x="114" fg:w="1"/><text x="64.2949%" y="111.50"></text></g><g><title>runtime.duffcopy+456 (1 samples, 0.56%)</title><rect x="64.0449%" y="85" width="0.5618%" height="15" fill="rgb(247,70,30)" fg:x="114" fg:w="1"/><text x="64.2949%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (2 samples, 1.12%)</title><rect x="65.1685%" y="133" width="1.1236%" height="15" fill="rgb(212,68,19)" fg:x="116" fg:w="2"/><text x="65.4185%" y="143.50"></text></g><g><title>sort.(*reverse).Less (1 samples, 0.56%)</title><rect x="66.2921%" y="133" width="0.5618%" height="15" fill="rgb(240,187,13)" fg:x="118" fg:w="1"/><text x="66.5421%" y="143.50"></text></g><g><title>sort.(*reverse).Swap (1 samples, 0.56%)</title><rect x="66.8539%" y="133" width="0.5618%" height="15" fill="rgb(223,113,26)" fg:x="119" fg:w="1"/><text x="67.1039%" y="143.50"></text></g><g><title>sort.choosePivot (2 samples, 1.12%)</title><rect x="67.4157%" y="133" width="1.1236%" height="15" fill="rgb(206,192,2)" fg:x="120" fg:w="2"/><text x="67.6657%" y="143.50"></text></g><g><title>sort.median (1 samples, 0.56%)</title><rect x="67.9775%" y="117" width="0.5618%" height="15" fill="rgb(241,108,4)" fg:x="121" fg:w="1"/><text x="68.2275%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="67.9775%" y="101" width="0.5618%" height="15" fill="rgb(247,173,49)" fg:x="121" fg:w="1"/><text x="68.2275%" y="111.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="67.9775%" y="85" width="0.5618%" height="15" fill="rgb(224,114,35)" fg:x="121" fg:w="1"/><text x="68.2275%" y="95.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="69.6629%" y="101" width="0.5618%" height="15" fill="rgb(245,159,27)" fg:x="124" fg:w="1"/><text x="69.9129%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (6 samples, 3.37%)</title><rect x="68.5393%" y="117" width="3.3708%" height="15" fill="rgb(245,172,44)" fg:x="122" fg:w="6"/><text x="68.7893%" y="127.50">git..</text></g><g><title>runtime.memequal (3 samples, 1.69%)</title><rect x="70.2247%" y="101" width="1.6854%" height="15" fill="rgb(236,23,11)" fg:x="125" fg:w="3"/><text x="70.4747%" y="111.50"></text></g><g><title>runtime.duffcopy+472 (1 samples, 0.56%)</title><rect x="71.9101%" y="85" width="0.5618%" height="15" fill="rgb(205,117,38)" fg:x="128" fg:w="1"/><text x="72.1601%" y="95.50"></text></g><g><title>runtime.duffcopy+480 (1 samples, 0.56%)</title><rect x="72.4719%" y="85" width="0.5618%" height="15" fill="rgb(237,72,25)" fg:x="129" fg:w="1"/><text x="72.7219%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (3 samples, 1.69%)</title><rect x="71.9101%" y="117" width="1.6854%" height="15" fill="rgb(244,70,9)" fg:x="128" fg:w="3"/><text x="72.1601%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (3 samples, 1.69%)</title><rect x="71.9101%" y="101" width="1.6854%" height="15" fill="rgb(217,125,39)" fg:x="128" fg:w="3"/><text x="72.1601%" y="111.50"></text></g><g><title>runtime.duffcopy+504 (1 samples, 0.56%)</title><rect x="73.0337%" y="85" width="0.5618%" height="15" fill="rgb(235,36,10)" fg:x="130" fg:w="1"/><text x="73.2837%" y="95.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="74.1573%" y="85" width="0.5618%" height="15" fill="rgb(251,123,47)" fg:x="132" fg:w="1"/><text x="74.4073%" y="95.50"></text></g><g><title>sort.(*reverse).Less (3 samples, 1.69%)</title><rect x="73.5955%" y="117" width="1.6854%" height="15" fill="rgb(221,13,13)" fg:x="131" fg:w="3"/><text x="73.8455%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (3 samples, 1.69%)</title><rect x="73.5955%" y="101" width="1.6854%" height="15" fill="rgb(238,131,9)" fg:x="131" fg:w="3"/><text x="73.8455%" y="111.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="74.7191%" y="85" width="0.5618%" height="15" fill="rgb(211,50,8)" fg:x="133" fg:w="1"/><text x="74.9691%" y="95.50"></text></g><g><title>sort.insertionSort (16 samples, 8.99%)</title><rect x="68.5393%" y="133" width="8.9888%" height="15" fill="rgb(245,182,24)" fg:x="122" fg:w="16"/><text x="68.7893%" y="143.50">sort.insertio..</text></g><g><title>sort.(*reverse).Swap (4 samples, 2.25%)</title><rect x="75.2809%" y="117" width="2.2472%" height="15" fill="rgb(242,14,37)" fg:x="134" fg:w="4"/><text x="75.5309%" y="127.50">s..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (4 samples, 2.25%)</title><rect x="75.2809%" y="101" width="2.2472%" height="15" fill="rgb(246,228,12)" fg:x="134" fg:w="4"/><text x="75.5309%" y="111.50">g..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (4 samples, 2.25%)</title><rect x="75.2809%" y="85" width="2.2472%" height="15" fill="rgb(213,55,15)" fg:x="134" fg:w="4"/><text x="75.5309%" y="95.50">g..</text></g><g><title>runtime.duffcopy+504 (4 samples, 2.25%)</title><rect x="75.2809%" y="69" width="2.2472%" height="15" fill="rgb(209,9,3)" fg:x="134" fg:w="4"/><text x="75.5309%" y="79.50">r..</text></g><g><title>sort.partialInsertionSort (1 samples, 0.56%)</title><rect x="77.5281%" y="133" width="0.5618%" height="15" fill="rgb(230,59,30)" fg:x="138" fg:w="1"/><text x="77.7781%" y="143.50"></text></g><g><title>sort.(*reverse).Less (1 samples, 0.56%)</title><rect x="77.5281%" y="117" width="0.5618%" height="15" fill="rgb(209,121,21)" fg:x="138" fg:w="1"/><text x="77.7781%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="77.5281%" y="101" width="0.5618%" height="15" fill="rgb(220,109,13)" fg:x="138" fg:w="1"/><text x="77.7781%" y="111.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="77.5281%" y="85" width="0.5618%" height="15" fill="rgb(232,18,1)" fg:x="138" fg:w="1"/><text x="77.7781%" y="95.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="79.2135%" y="101" width="0.5618%" height="15" fill="rgb(215,41,42)" fg:x="141" fg:w="1"/><text x="79.4635%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (3 samples, 1.69%)</title><rect x="78.6517%" y="117" width="1.6854%" height="15" fill="rgb(224,123,36)" fg:x="140" fg:w="3"/><text x="78.9017%" y="127.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="79.7753%" y="101" width="0.5618%" height="15" fill="rgb(240,125,3)" fg:x="142" fg:w="1"/><text x="80.0253%" y="111.50"></text></g><g><title>sort.partition (5 samples, 2.81%)</title><rect x="78.0899%" y="133" width="2.8090%" height="15" fill="rgb(205,98,50)" fg:x="139" fg:w="5"/><text x="78.3399%" y="143.50">so..</text></g><g><title>sort.(*reverse).Less (1 samples, 0.56%)</title><rect x="80.3371%" y="117" width="0.5618%" height="15" fill="rgb(205,185,37)" fg:x="143" fg:w="1"/><text x="80.5871%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="80.3371%" y="101" width="0.5618%" height="15" fill="rgb(238,207,15)" fg:x="143" fg:w="1"/><text x="80.5871%" y="111.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="80.3371%" y="85" width="0.5618%" height="15" fill="rgb(213,199,42)" fg:x="143" fg:w="1"/><text x="80.5871%" y="95.50"></text></g><g><title>sort.(*reverse).Less (2 samples, 1.12%)</title><rect x="82.0225%" y="117" width="1.1236%" height="15" fill="rgb(235,201,11)" fg:x="146" fg:w="2"/><text x="82.2725%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="82.5843%" y="101" width="0.5618%" height="15" fill="rgb(207,46,11)" fg:x="147" fg:w="1"/><text x="82.8343%" y="111.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="82.5843%" y="85" width="0.5618%" height="15" fill="rgb(241,35,35)" fg:x="147" fg:w="1"/><text x="82.8343%" y="95.50"></text></g><g><title>sort.(*reverse).Swap (1 samples, 0.56%)</title><rect x="83.1461%" y="117" width="0.5618%" height="15" fill="rgb(243,32,47)" fg:x="148" fg:w="1"/><text x="83.3961%" y="127.50"></text></g><g><title>sort.choosePivot (1 samples, 0.56%)</title><rect x="83.7079%" y="117" width="0.5618%" height="15" fill="rgb(247,202,23)" fg:x="149" fg:w="1"/><text x="83.9579%" y="127.50"></text></g><g><title>sort.median (1 samples, 0.56%)</title><rect x="83.7079%" y="101" width="0.5618%" height="15" fill="rgb(219,102,11)" fg:x="149" fg:w="1"/><text x="83.9579%" y="111.50"></text></g><g><title>sort.(*reverse).Less (1 samples, 0.56%)</title><rect x="83.7079%" y="85" width="0.5618%" height="15" fill="rgb(243,110,44)" fg:x="149" fg:w="1"/><text x="83.9579%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="83.7079%" y="69" width="0.5618%" height="15" fill="rgb(222,74,54)" fg:x="149" fg:w="1"/><text x="83.9579%" y="79.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="84.2697%" y="101" width="0.5618%" height="15" fill="rgb(216,99,12)" fg:x="150" fg:w="1"/><text x="84.5197%" y="111.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="84.2697%" y="85" width="0.5618%" height="15" fill="rgb(226,22,26)" fg:x="150" fg:w="1"/><text x="84.5197%" y="95.50"></text></g><g><title>runtime.duffcopy+496 (1 samples, 0.56%)</title><rect x="85.3933%" y="69" width="0.5618%" height="15" fill="rgb(217,163,10)" fg:x="152" fg:w="1"/><text x="85.6433%" y="79.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (3 samples, 1.69%)</title><rect x="84.8315%" y="101" width="1.6854%" height="15" fill="rgb(213,25,53)" fg:x="151" fg:w="3"/><text x="85.0815%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (2 samples, 1.12%)</title><rect x="85.3933%" y="85" width="1.1236%" height="15" fill="rgb(252,105,26)" fg:x="152" fg:w="2"/><text x="85.6433%" y="95.50"></text></g><g><title>runtime.duffcopy+504 (1 samples, 0.56%)</title><rect x="85.9551%" y="69" width="0.5618%" height="15" fill="rgb(220,39,43)" fg:x="153" fg:w="1"/><text x="86.2051%" y="79.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="87.6404%" y="69" width="0.5618%" height="15" fill="rgb(229,68,48)" fg:x="156" fg:w="1"/><text x="87.8904%" y="79.50"></text></g><g><title>sort.(*reverse).Less (4 samples, 2.25%)</title><rect x="86.5169%" y="101" width="2.2472%" height="15" fill="rgb(252,8,32)" fg:x="154" fg:w="4"/><text x="86.7669%" y="111.50">s..</text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (3 samples, 1.69%)</title><rect x="87.0787%" y="85" width="1.6854%" height="15" fill="rgb(223,20,43)" fg:x="155" fg:w="3"/><text x="87.3287%" y="95.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="88.2022%" y="69" width="0.5618%" height="15" fill="rgb(229,81,49)" fg:x="157" fg:w="1"/><text x="88.4522%" y="79.50"></text></g><g><title>sort.insertionSort (9 samples, 5.06%)</title><rect x="84.2697%" y="117" width="5.0562%" height="15" fill="rgb(236,28,36)" fg:x="150" fg:w="9"/><text x="84.5197%" y="127.50">sort.i..</text></g><g><title>sort.(*reverse).Swap (1 samples, 0.56%)</title><rect x="88.7640%" y="101" width="0.5618%" height="15" fill="rgb(249,185,26)" fg:x="158" fg:w="1"/><text x="89.0140%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="88.7640%" y="85" width="0.5618%" height="15" fill="rgb(249,174,33)" fg:x="158" fg:w="1"/><text x="89.0140%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="88.7640%" y="69" width="0.5618%" height="15" fill="rgb(233,201,37)" fg:x="158" fg:w="1"/><text x="89.0140%" y="79.50"></text></g><g><title>runtime.duffcopy+488 (1 samples, 0.56%)</title><rect x="88.7640%" y="53" width="0.5618%" height="15" fill="rgb(221,78,26)" fg:x="158" fg:w="1"/><text x="89.0140%" y="63.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="89.3258%" y="85" width="0.5618%" height="15" fill="rgb(250,127,30)" fg:x="159" fg:w="1"/><text x="89.5758%" y="95.50"></text></g><g><title>sort.partition (2 samples, 1.12%)</title><rect x="89.3258%" y="117" width="1.1236%" height="15" fill="rgb(230,49,44)" fg:x="159" fg:w="2"/><text x="89.5758%" y="127.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (2 samples, 1.12%)</title><rect x="89.3258%" y="101" width="1.1236%" height="15" fill="rgb(229,67,23)" fg:x="159" fg:w="2"/><text x="89.5758%" y="111.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="89.8876%" y="85" width="0.5618%" height="15" fill="rgb(249,83,47)" fg:x="160" fg:w="1"/><text x="90.1376%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="90.4494%" y="101" width="0.5618%" height="15" fill="rgb(215,43,3)" fg:x="161" fg:w="1"/><text x="90.6994%" y="111.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (3 samples, 1.69%)</title><rect x="91.5730%" y="85" width="1.6854%" height="15" fill="rgb(238,154,13)" fg:x="163" fg:w="3"/><text x="91.8230%" y="95.50"></text></g><g><title>cmpbody (1 samples, 0.56%)</title><rect x="92.6966%" y="69" width="0.5618%" height="15" fill="rgb(219,56,2)" fg:x="165" fg:w="1"/><text x="92.9466%" y="79.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="93.2584%" y="85" width="0.5618%" height="15" fill="rgb(233,0,4)" fg:x="166" fg:w="1"/><text x="93.5084%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="93.2584%" y="69" width="0.5618%" height="15" fill="rgb(235,30,7)" fg:x="166" fg:w="1"/><text x="93.5084%" y="79.50"></text></g><g><title>runtime.duffcopy+456 (1 samples, 0.56%)</title><rect x="93.2584%" y="53" width="0.5618%" height="15" fill="rgb(250,79,13)" fg:x="166" fg:w="1"/><text x="93.5084%" y="63.50"></text></g><g><title>sort.insertionSort (6 samples, 3.37%)</title><rect x="91.0112%" y="101" width="3.3708%" height="15" fill="rgb(211,146,34)" fg:x="162" fg:w="6"/><text x="91.2612%" y="111.50">sor..</text></g><g><title>sort.(*reverse).Less (1 samples, 0.56%)</title><rect x="93.8202%" y="85" width="0.5618%" height="15" fill="rgb(228,22,38)" fg:x="167" fg:w="1"/><text x="94.0702%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="93.8202%" y="69" width="0.5618%" height="15" fill="rgb(235,168,5)" fg:x="167" fg:w="1"/><text x="94.0702%" y="79.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="93.8202%" y="53" width="0.5618%" height="15" fill="rgb(221,155,16)" fg:x="167" fg:w="1"/><text x="94.0702%" y="63.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="94.3820%" y="85" width="0.5618%" height="15" fill="rgb(215,215,53)" fg:x="168" fg:w="1"/><text x="94.6320%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="94.9438%" y="85" width="0.5618%" height="15" fill="rgb(223,4,10)" fg:x="169" fg:w="1"/><text x="95.1938%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="94.9438%" y="69" width="0.5618%" height="15" fill="rgb(234,103,6)" fg:x="169" fg:w="1"/><text x="95.1938%" y="79.50"></text></g><g><title>runtime.duffcopy+504 (1 samples, 0.56%)</title><rect x="94.9438%" y="53" width="0.5618%" height="15" fill="rgb(227,97,0)" fg:x="169" fg:w="1"/><text x="95.1938%" y="63.50"></text></g><g><title>sort.partition (3 samples, 1.69%)</title><rect x="94.3820%" y="101" width="1.6854%" height="15" fill="rgb(234,150,53)" fg:x="168" fg:w="3"/><text x="94.6320%" y="111.50"></text></g><g><title>sort.(*reverse).Swap (1 samples, 0.56%)</title><rect x="95.5056%" y="85" width="0.5618%" height="15" fill="rgb(228,201,54)" fg:x="170" fg:w="1"/><text x="95.7556%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="95.5056%" y="69" width="0.5618%" height="15" fill="rgb(222,22,37)" fg:x="170" fg:w="1"/><text x="95.7556%" y="79.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="95.5056%" y="53" width="0.5618%" height="15" fill="rgb(237,53,32)" fg:x="170" fg:w="1"/><text x="95.7556%" y="63.50"></text></g><g><title>runtime.duffcopy+496 (1 samples, 0.56%)</title><rect x="95.5056%" y="37" width="0.5618%" height="15" fill="rgb(233,25,53)" fg:x="170" fg:w="1"/><text x="95.7556%" y="47.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Less (1 samples, 0.56%)</title><rect x="96.0674%" y="69" width="0.5618%" height="15" fill="rgb(210,40,34)" fg:x="171" fg:w="1"/><text x="96.3174%" y="79.50"></text></g><g><title>runtime.memequal (1 samples, 0.56%)</title><rect x="96.0674%" y="53" width="0.5618%" height="15" fill="rgb(241,220,44)" fg:x="171" fg:w="1"/><text x="96.3174%" y="63.50"></text></g><g><title>github.com/ory/kratos/persistence/sql.NewPersister (173 samples, 97.19%)</title><rect x="0.0000%" y="341" width="97.1910%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="173"/><text x="0.2500%" y="351.50">github.com/ory/kratos/persistence/sql.NewPersister</text></g><g><title>github.com/ory/x/popx.NewMigrationBox (173 samples, 97.19%)</title><rect x="0.0000%" y="325" width="97.1910%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="173"/><text x="0.2500%" y="335.50">github.com/ory/x/popx.NewMigrationBox</text></g><g><title>io/fs.WalkDir (169 samples, 94.94%)</title><rect x="2.2472%" y="309" width="94.9438%" height="15" fill="rgb(224,130,29)" fg:x="4" fg:w="169"/><text x="2.4972%" y="319.50">io/fs.WalkDir</text></g><g><title>io/fs.walkDir (169 samples, 94.94%)</title><rect x="2.2472%" y="293" width="94.9438%" height="15" fill="rgb(235,212,8)" fg:x="4" fg:w="169"/><text x="2.4972%" y="303.50">io/fs.walkDir</text></g><g><title>io/fs.walkDir (169 samples, 94.94%)</title><rect x="2.2472%" y="277" width="94.9438%" height="15" fill="rgb(223,33,50)" fg:x="4" fg:w="169"/><text x="2.4972%" y="287.50">io/fs.walkDir</text></g><g><title>io/fs.walkDir (169 samples, 94.94%)</title><rect x="2.2472%" y="261" width="94.9438%" height="15" fill="rgb(219,149,13)" fg:x="4" fg:w="169"/><text x="2.4972%" y="271.50">io/fs.walkDir</text></g><g><title>io/fs.walkDir (165 samples, 92.70%)</title><rect x="4.4944%" y="245" width="92.6966%" height="15" fill="rgb(250,156,29)" fg:x="8" fg:w="165"/><text x="4.7444%" y="255.50">io/fs.walkDir</text></g><g><title>github.com/ory/x/popx.NewMigrationBox.(*MigrationBox).findMigrations.func4 (165 samples, 92.70%)</title><rect x="4.4944%" y="229" width="92.6966%" height="15" fill="rgb(216,193,19)" fg:x="8" fg:w="165"/><text x="4.7444%" y="239.50">github.com/ory/x/popx.NewMigrationBox.(*MigrationBox).findMigrations.func4</text></g><g><title>sort.Sort (161 samples, 90.45%)</title><rect x="6.7416%" y="213" width="90.4494%" height="15" fill="rgb(216,135,14)" fg:x="12" fg:w="161"/><text x="6.9916%" y="223.50">sort.Sort</text></g><g><title>sort.pdqsort (161 samples, 90.45%)</title><rect x="6.7416%" y="197" width="90.4494%" height="15" fill="rgb(241,47,5)" fg:x="12" fg:w="161"/><text x="6.9916%" y="207.50">sort.pdqsort</text></g><g><title>sort.pdqsort (139 samples, 78.09%)</title><rect x="19.1011%" y="181" width="78.0899%" height="15" fill="rgb(233,42,35)" fg:x="34" fg:w="139"/><text x="19.3511%" y="191.50">sort.pdqsort</text></g><g><title>sort.pdqsort (100 samples, 56.18%)</title><rect x="41.0112%" y="165" width="56.1798%" height="15" fill="rgb(231,13,6)" fg:x="73" fg:w="100"/><text x="41.2612%" y="175.50">sort.pdqsort</text></g><g><title>sort.pdqsort (58 samples, 32.58%)</title><rect x="64.6067%" y="149" width="32.5843%" height="15" fill="rgb(207,181,40)" fg:x="115" fg:w="58"/><text x="64.8567%" y="159.50">sort.pdqsort</text></g><g><title>sort.pdqsort (29 samples, 16.29%)</title><rect x="80.8989%" y="133" width="16.2921%" height="15" fill="rgb(254,173,49)" fg:x="144" fg:w="29"/><text x="81.1489%" y="143.50">sort.pdqsort</text></g><g><title>sort.pdqsort (12 samples, 6.74%)</title><rect x="90.4494%" y="117" width="6.7416%" height="15" fill="rgb(221,1,38)" fg:x="161" fg:w="12"/><text x="90.6994%" y="127.50">sort.pdqs..</text></g><g><title>sort.pdqsort (2 samples, 1.12%)</title><rect x="96.0674%" y="101" width="1.1236%" height="15" fill="rgb(206,124,46)" fg:x="171" fg:w="2"/><text x="96.3174%" y="111.50"></text></g><g><title>sort.insertionSort (2 samples, 1.12%)</title><rect x="96.0674%" y="85" width="1.1236%" height="15" fill="rgb(249,21,11)" fg:x="171" fg:w="2"/><text x="96.3174%" y="95.50"></text></g><g><title>github.com/ory/x/popx.(*Migrations).Swap (1 samples, 0.56%)</title><rect x="96.6292%" y="69" width="0.5618%" height="15" fill="rgb(222,201,40)" fg:x="172" fg:w="1"/><text x="96.8792%" y="79.50"></text></g><g><title>database/sql.(*Tx).ExecContext (1 samples, 0.56%)</title><rect x="97.1910%" y="245" width="0.5618%" height="15" fill="rgb(235,61,29)" fg:x="173" fg:w="1"/><text x="97.4410%" y="255.50"></text></g><g><title>database/sql.(*DB).execDC (1 samples, 0.56%)</title><rect x="97.1910%" y="229" width="0.5618%" height="15" fill="rgb(219,207,3)" fg:x="173" fg:w="1"/><text x="97.4410%" y="239.50"></text></g><g><title>database/sql.withLock (1 samples, 0.56%)</title><rect x="97.1910%" y="213" width="0.5618%" height="15" fill="rgb(222,56,46)" fg:x="173" fg:w="1"/><text x="97.4410%" y="223.50"></text></g><g><title>database/sql.(*DB).execDC.func2 (1 samples, 0.56%)</title><rect x="97.1910%" y="197" width="0.5618%" height="15" fill="rgb(239,76,54)" fg:x="173" fg:w="1"/><text x="97.4410%" y="207.50"></text></g><g><title>database/sql.ctxDriverExec (1 samples, 0.56%)</title><rect x="97.1910%" y="181" width="0.5618%" height="15" fill="rgb(231,124,27)" fg:x="173" fg:w="1"/><text x="97.4410%" y="191.50"></text></g><g><title>github.com/luna-duclos/instrumentedsql.(*wrappedConn).ExecContext (1 samples, 0.56%)</title><rect x="97.1910%" y="165" width="0.5618%" height="15" fill="rgb(249,195,6)" fg:x="173" fg:w="1"/><text x="97.4410%" y="175.50"></text></g><g><title>github.com/luna-duclos/instrumentedsql.wrappedConn.ExecContext (1 samples, 0.56%)</title><rect x="97.1910%" y="149" width="0.5618%" height="15" fill="rgb(237,174,47)" fg:x="173" fg:w="1"/><text x="97.4410%" y="159.50"></text></g><g><title>github.com/mattn/go-sqlite3.(*SQLiteConn).ExecContext (1 samples, 0.56%)</title><rect x="97.1910%" y="133" width="0.5618%" height="15" fill="rgb(206,201,31)" fg:x="173" fg:w="1"/><text x="97.4410%" y="143.50"></text></g><g><title>github.com/ory/x/popx.NewMigrationBox.ParameterizedMigrationContent.func3 (1 samples, 0.56%)</title><rect x="97.7528%" y="245" width="0.5618%" height="15" fill="rgb(231,57,52)" fg:x="174" fg:w="1"/><text x="98.0028%" y="255.50"></text></g><g><title>runtime.slicebytetostring (1 samples, 0.56%)</title><rect x="97.7528%" y="229" width="0.5618%" height="15" fill="rgb(248,177,22)" fg:x="174" fg:w="1"/><text x="98.0028%" y="239.50"></text></g><g><title>runtime.memmove (1 samples, 0.56%)</title><rect x="97.7528%" y="213" width="0.5618%" height="15" fill="rgb(215,211,37)" fg:x="174" fg:w="1"/><text x="98.0028%" y="223.50"></text></g><g><title>regexp.(*Regexp).tryBacktrack (1 samples, 0.56%)</title><rect x="98.3146%" y="165" width="0.5618%" height="15" fill="rgb(241,128,51)" fg:x="175" fg:w="1"/><text x="98.5646%" y="175.50"></text></g><g><title>github.com/ory/x/popx.(*Migrator).isolatedTransaction (4 samples, 2.25%)</title><rect x="97.1910%" y="293" width="2.2472%" height="15" fill="rgb(227,165,31)" fg:x="173" fg:w="4"/><text x="97.4410%" y="303.50">g..</text></g><g><title>github.com/ory/x/popx.(*Migrator).UpTo.func1.2 (4 samples, 2.25%)</title><rect x="97.1910%" y="277" width="2.2472%" height="15" fill="rgb(228,167,24)" fg:x="173" fg:w="4"/><text x="97.4410%" y="287.50">g..</text></g><g><title>github.com/ory/x/popx.NewMigrationBox.func1.1 (4 samples, 2.25%)</title><rect x="97.1910%" y="261" width="2.2472%" height="15" fill="rgb(228,143,12)" fg:x="173" fg:w="4"/><text x="97.4410%" y="271.50">g..</text></g><g><title>github.com/ory/x/popx.isMigrationEmpty (2 samples, 1.12%)</title><rect x="98.3146%" y="245" width="1.1236%" height="15" fill="rgb(249,149,8)" fg:x="175" fg:w="2"/><text x="98.5646%" y="255.50"></text></g><g><title>regexp.(*Regexp).ReplaceAllString (2 samples, 1.12%)</title><rect x="98.3146%" y="229" width="1.1236%" height="15" fill="rgb(243,35,44)" fg:x="175" fg:w="2"/><text x="98.5646%" y="239.50"></text></g><g><title>regexp.(*Regexp).replaceAll (2 samples, 1.12%)</title><rect x="98.3146%" y="213" width="1.1236%" height="15" fill="rgb(246,89,9)" fg:x="175" fg:w="2"/><text x="98.5646%" y="223.50"></text></g><g><title>regexp.(*Regexp).doExecute (2 samples, 1.12%)</title><rect x="98.3146%" y="197" width="1.1236%" height="15" fill="rgb(233,213,13)" fg:x="175" fg:w="2"/><text x="98.5646%" y="207.50"></text></g><g><title>regexp.(*Regexp).backtrack (2 samples, 1.12%)</title><rect x="98.3146%" y="181" width="1.1236%" height="15" fill="rgb(233,141,41)" fg:x="175" fg:w="2"/><text x="98.5646%" y="191.50"></text></g><g><title>regexp.(*inputString).step (1 samples, 0.56%)</title><rect x="98.8764%" y="165" width="0.5618%" height="15" fill="rgb(239,167,4)" fg:x="176" fg:w="1"/><text x="99.1264%" y="175.50"></text></g><g><title>all (178 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="178"/><text x="0.2500%" y="511.50"></text></g><g><title>runtime.goexit.abi0 (178 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="178"/><text x="0.2500%" y="495.50">runtime.goexit.abi0</text></g><g><title>testing.(*T).Run.gowrap1 (178 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="178"/><text x="0.2500%" y="479.50">testing.(*T).Run.gowrap1</text></g><g><title>testing.tRunner (178 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="178"/><text x="0.2500%" y="463.50">testing.tRunner</text></g><g><title>github.com/ory/kratos/selfservice/strategy/code_test.TestRecoveryCode (178 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="178"/><text x="0.2500%" y="447.50">github.com/ory/kratos/selfservice/strategy/code_test.TestRecoveryCode</text></g><g><title>github.com/ory/kratos/internal.NewFastRegistryWithMocks (178 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="178"/><text x="0.2500%" y="431.50">github.com/ory/kratos/internal.NewFastRegistryWithMocks</text></g><g><title>github.com/ory/kratos/internal.NewRegistryDefaultWithDSN (178 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="178"/><text x="0.2500%" y="415.50">github.com/ory/kratos/internal.NewRegistryDefaultWithDSN</text></g><g><title>github.com/ory/kratos/driver.(*RegistryDefault).Init (178 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="178"/><text x="0.2500%" y="399.50">github.com/ory/kratos/driver.(*RegistryDefault).Init</text></g><g><title>github.com/cenkalti/backoff.RetryNotify (178 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="178"/><text x="0.2500%" y="383.50">github.com/cenkalti/backoff.RetryNotify</text></g><g><title>github.com/ory/kratos/driver.(*RegistryDefault).Init.func1 (178 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="178"/><text x="0.2500%" y="367.50">github.com/ory/kratos/driver.(*RegistryDefault).Init.func1</text></g><g><title>github.com/ory/x/popx.(*Migrator).UpTo (5 samples, 2.81%)</title><rect x="97.1910%" y="341" width="2.8090%" height="15" fill="rgb(210,31,22)" fg:x="173" fg:w="5"/><text x="97.4410%" y="351.50">gi..</text></g><g><title>github.com/ory/x/popx.(*Migrator).exec (5 samples, 2.81%)</title><rect x="97.1910%" y="325" width="2.8090%" height="15" fill="rgb(239,54,39)" fg:x="173" fg:w="5"/><text x="97.4410%" y="335.50">gi..</text></g><g><title>github.com/ory/x/popx.(*Migrator).UpTo.func1 (5 samples, 2.81%)</title><rect x="97.1910%" y="309" width="2.8090%" height="15" fill="rgb(230,99,41)" fg:x="173" fg:w="5"/><text x="97.4410%" y="319.50">gi..</text></g><g><title>github.com/ory/x/popx.NewMigrationBox.func2.1 (1 samples, 0.56%)</title><rect x="99.4382%" y="293" width="0.5618%" height="15" fill="rgb(253,106,12)" fg:x="177" fg:w="1"/><text x="99.6882%" y="303.50"></text></g><g><title>github.com/ory/x/popx.NewMigrationBox.ParameterizedMigrationContent.func3 (1 samples, 0.56%)</title><rect x="99.4382%" y="277" width="0.5618%" height="15" fill="rgb(213,46,41)" fg:x="177" fg:w="1"/><text x="99.6882%" y="287.50"></text></g><g><title>text/template.(*Template).Parse (1 samples, 0.56%)</title><rect x="99.4382%" y="261" width="0.5618%" height="15" fill="rgb(215,133,35)" fg:x="177" fg:w="1"/><text x="99.6882%" y="271.50"></text></g><g><title>runtime.mapassign_faststr (1 samples, 0.56%)</title><rect x="99.4382%" y="245" width="0.5618%" height="15" fill="rgb(213,28,5)" fg:x="177" fg:w="1"/><text x="99.6882%" y="255.50"></text></g></svg></svg>